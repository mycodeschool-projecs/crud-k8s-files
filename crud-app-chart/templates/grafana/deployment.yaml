{{- if and .Values.grafana.enabled .Values.features.monitoring }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "crud-app.fullname" . }}-grafana
  namespace: {{ .Values.global.namespace }}
  labels:
    {{- include "crud-app.grafana.labels" . | nindent 4 }}
spec:
  replicas: 1

  selector:
    matchLabels:
      {{- include "crud-app.grafana.selectorLabels" . | nindent 6 }}

  template:
    metadata:
      labels:
        {{- include "crud-app.grafana.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}

    spec:
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.global.imagePullSecrets | nindent 8 }}
      {{- end }}

      # Security context
      securityContext:
        fsGroup: 472
        runAsNonRoot: true
        runAsUser: 472

      # Init container to wait for Prometheus
      {{- if .Values.initContainers.enabled }}
      initContainers:
        - name: wait-for-prometheus
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              until nc -z {{ include "crud-app.fullname" . }}-prometheus 9090; do
                echo "Waiting for Prometheus..."
                sleep 10
              done
              echo "Prometheus is ready!"
      {{- end }}

      containers:
        - name: grafana
          image: {{ include "crud-app.image" (dict "image" .Values.grafana.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.grafana.image.pullPolicy }}

          # Environment variables for Grafana configuration
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.grafana.adminUser | quote }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ .Values.grafana.adminPassword | quote }}
            - name: GF_SERVER_ROOT_URL
              value: "{{ .Values.app.baseUrl }}/grafana/"
            - name: GF_SERVER_SERVE_FROM_SUB_PATH
              value: "true"
            - name: GF_PATHS_DATA
              value: "/var/lib/grafana"
            - name: GF_PATHS_LOGS
              value: "/var/log/grafana"
            - name: GF_PATHS_PLUGINS
              value: "/var/lib/grafana/plugins"
            - name: GF_PATHS_PROVISIONING
              value: "/etc/grafana/provisioning"
            # Anonymous access configuration
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
            # Install plugins
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel"

          # Container ports
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP

          # Volume mounts
          volumeMounts:
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-logs
              mountPath: /var/log/grafana

          # Resource configuration
          {{- if .Values.grafana.resources }}
          resources:
            {{- toYaml .Values.grafana.resources | nindent 12 }}
          {{- end }}

          # Health checks
          {{- if .Values.healthChecks.enabled }}
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          {{- end }}

      # Volumes
      volumes:
        - name: grafana-datasources
          configMap:
            name: {{ include "crud-app.fullname" . }}-config
            items:
              - key: grafana-datasources.yml
                path: grafana-datasources.yml
        - name: grafana-data
          persistentVolumeClaim:
            claimName: {{ include "crud-app.fullname" . }}-grafana-pvc
        - name: grafana-logs
          emptyDir: {}
{{- end }}
