# STEP 2: values.yaml - Default Configuration Values
# ================================================
# This file contains all configurable values for the chart
# Users can override these values during installation

# Global settings that apply to all components
global:
  namespace: default              # Target Kubernetes namespace
  storageClass: local-path       # Storage class for persistent volumes
  imageRegistry: ""              # Global image registry prefix (optional)
  imagePullSecrets: []           # Image pull secrets if needed

# Application images configuration
images:
  # Authentication service image
  authService:
    repository: mycodeschool/crud-auth-api
    tag: "29.03.2025.16.35.52"
    pullPolicy: IfNotPresent

  # Command service image
  commandService:
    repository: mycodeschool/crud-command-api
    tag: "29.03.2025.16.35.20"
    pullPolicy: IfNotPresent

  # React frontend image
  reactApp:
    repository: mycodeschool/crud-client-api
    tag: "16.03.2025.08.35.19"
    pullPolicy: IfNotPresent

# MySQL Database configuration
mysql:
  enabled: true                   # Enable/disable MySQL deployment
  image:
    repository: mysql
    tag: "8.0"
    pullPolicy: IfNotPresent

  # Database configuration
  database: testdb               # Database name
  user: testuser                # Database user
  password: testpass            # Database password (will be base64 encoded)
  rootPassword: testpass        # Root password (will be base64 encoded)

  # Storage configuration
  storage:
    size: 5Gi                   # Persistent volume size
    accessMode: ReadWriteOnce   # Access mode for PVC

  # Resource limits and requests
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

# Elasticsearch configuration (part of ELK stack)
elasticsearch:
  enabled: true                   # Enable/disable Elasticsearch
  image:
    repository: docker.elastic.co/elasticsearch/elasticsearch
    tag: "8.12.1"
    pullPolicy: IfNotPresent

  # Security configuration
  password: passwOrd             # Elasticsearch password

  # Storage configuration
  storage:
    size: 5Gi
    accessMode: ReadWriteOnce

  # Resource configuration (Elasticsearch is memory-intensive)
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

  # JVM heap size
  javaOpts: "-Xms1g -Xmx1g"

# Kibana configuration (log visualization)
kibana:
  enabled: true                   # Enable/disable Kibana
  image:
    repository: docker.elastic.co/kibana/kibana
    tag: "8.12.1"
    pullPolicy: IfNotPresent

  # Security configuration
  password: passwOrd             # Kibana system user password
  basePath: "/kibana"            # Base path for ingress routing

  # Resource configuration
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

# Logstash configuration (log processing)
logstash:
  enabled: true                   # Enable/disable Logstash
  image:
    repository: docker.elastic.co/logstash/logstash
    tag: "8.12.1"
    pullPolicy: IfNotPresent

  # Port configuration
  port: 3100                     # Port for log ingestion

  # Resource configuration
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

# Prometheus configuration (metrics collection)
prometheus:
  enabled: true                   # Enable/disable Prometheus
  image:
    repository: prom/prometheus
    tag: "latest"
    pullPolicy: IfNotPresent

  # Storage configuration
  storage:
    size: 5Gi
    accessMode: ReadWriteOnce

  # Scraping configuration
  scrapeInterval: 15s            # Global scrape interval
  evaluationInterval: 15s       # Rule evaluation interval

  # Resource configuration
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

# Grafana configuration (metrics visualization)
grafana:
  enabled: true                   # Enable/disable Grafana
  image:
    repository: grafana/grafana
    tag: "latest"
    pullPolicy: IfNotPresent

  # Admin user configuration
  adminUser: admin
  adminPassword: admin

  # Storage configuration
  storage:
    size: 5Gi
    accessMode: ReadWriteOnce

  # Resource configuration
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

# Zipkin configuration (distributed tracing)
zipkin:
  enabled: true                   # Enable/disable Zipkin
  image:
    repository: openzipkin/zipkin
    tag: "2"
    pullPolicy: IfNotPresent

  # Resource configuration
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"

# Ingress configuration (external access)
ingress:
  enabled: true                   # Enable/disable ingress
  className: nginx               # Ingress class (nginx, traefik, etc.)

  # Ingress annotations
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rewrite-target: /

  # Path configuration for different services
  paths:
    reactApp: /                  # Frontend app (root path)
    authService: /api           # Authentication API
    commandService: /ms1        # Command service API
    kibana: /kibana            # Kibana web interface
    zipkin: /zipkin            # Zipkin web interface
    grafana: /grafana          # Grafana web interface

  # TLS configuration (optional)
  tls: []
    # - secretName: crud-app-tls
    #   hosts:
  #     - crud-app.local

# Service configuration
services:
  # Authentication service
  authService:
    type: ClusterIP             # Service type (ClusterIP, NodePort, LoadBalancer)
    port: 8082                 # Service port

  # Command service
  commandService:
    type: ClusterIP
    port: 8081

  # React application
  reactApp:
    type: ClusterIP
    port: 3000

# Component configuration
reactApp:
  replicas: 1

commandService:
  replicas: 1

authService:
  replicas: 1

# Application-specific configuration
app:
  baseUrl: "http://localhost"     # Base URL for the application
  springProfiles: "kubernetes"   # Spring Boot profiles to activate

  # Environment variables (optional)
  env: {}
    # JAVA_OPTS: "-Xmx512m"
  # SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/testdb"

# Feature flags to enable/disable major components
features:
  monitoring: true              # Enable Prometheus + Grafana
  logging: true                # Enable ELK stack
  tracing: true                # Enable Zipkin
  database: true               # Enable MySQL

# Startup dependencies (controls startup order)
initContainers:
  enabled: true                # Enable init containers for dependency checking

# Health checks configuration
healthChecks:
  enabled: true               # Enable health check endpoints

# Security context (optional)
securityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1000
# fsGroup: 2000

# Network policy (for pod isolation)
networkPolicy:
  enabled: false

# Pod disruption budgets (for high availability)
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Horizontal Pod Autoscaler configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
